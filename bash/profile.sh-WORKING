#!/bin/bash
SCRIPT_DIR="$(realpath ${BASH_SOURCE:-$0})"
SCRIPT_DIR="${SCRIPT_DIR%/*/${0##*/}*}"


# ARGS = work=$

    # INPUTS    BUILD=(ex.)'hardened'  	- build profile
    #           WORK=chroot offset		- working directory for install, skip if exists (DEPLOY).
	#			BOOT=/dev/sdX			- install to boot device, after generating image
	#			RECV=XXX				- RECV from server remotely, requires the host to be booted through medium, and mounted (ALL F/S) BTRFS+ZFS are block sends
	#

	#	future features :
	#		test to see if pool exists, add new zfs datasets if no dataset, other partition types.
	#		boot medium,
	#

source ./include.sh

function mounts()
{
    #echo "getting stage 3"
	local offset=$1

	mSize="$(cat /proc/meminfo | column -t | grep 'MemFree' | awk '{print $2}')"
	mSize="${mSize}K"

	# MOUNTS
	echo "msize = $mSize"
	mount -t proc proc ${offset}/proc
	mount --rbind /sys ${offset}/sys
	mount --make-rslave ${offset}/sys
	mount --rbind /dev ${offset}/dev
	mount --make-rslave ${offset}/dev
	# because autofs doesn't work right in a chroot ...
	mount -t tmpfs -o size=$mSize tmpfs ${offset}/tmp
	mount -t tmpfs tmpfs ${offset}/var/tmp
	mount -t tmpfs tmpfs ${offset}/run


	echo "attempting to mount binpkgs..."  2>&1
	# this is to build in new packages for future installs, not always present
	mount --bind /var/lib/portage/binpkgs ${offset}/var/lib/portage/binpkgs 
	ls ${offset}/var/lib/portage/binpkgs
}

function pkgProcessor()
{
    local profile=$1
	local offset=$2

	echo $profile 2>&1
	echo $offset 2>&1

	url="$(echo "$(${SCRIPT_DIR}/bash/mirror.sh ${SCRIPT_DIR}/config/package.mirrors *)/common.pkgs" | sed 's/ //g')"
	commonPkgs="$(curl $url)"
	echo ":::: $url"
	url="$(echo "$(${SCRIPT_DIR}/bash/mirror.sh ${SCRIPT_DIR}/config/package.mirrors *)/${profile}.pkgs" | sed 's/ //g')"
	profilePkgs="$(curl $url)"
	echo ":::: $url"

	local allPkgs="$(echo -e "${commonPkgs}\n${profilePkgs}" | uniq | sort)"

	local iBase="$(chroot ${offset} /usr/bin/qlist -I)"
	iBase="$(echo "${iBase}" | uniq | sort)"

	local diffPkgs="$(comm -1 -3 <(echo "${iBase}") <(echo "${allPkgs}"))"

	echo "${diffPkgs}" > ${offset}/package.list
}


###################################################################################################################################

#   GRAB:
#       profile         get profile from chroot.
#       /etc/           tar cfvz etc.tar.gz
#       <services>      rc-update 1> [hostname].services
#       zfs-keys        (tar cfvz -List , develop list from zfs_keys list)
#       pkg selector    (take globals, diff from profile generated, output to [hostname].pkgs )
#       users			tar cfvz home.tar.gz ; root.tar.gz

#       store values in portage/profiles/[domain]/[hostname]
#       ex. hypokrites.net/dom0 ... subdomains are attached to the hostname
#       ex. happy.printer = hostname, hypokrites.net = domain
#		
#		~/
#			profile.txt
#			etc.tar.gz
#			config.services
#			zfs_keys.tar.gz
#			config.pkgs
#			users.tar.gz
#		
#		WORK=		...working directory
#		PACKAGE=	...
#		INSTALL=


function getSelection() {

	x=$1

	case "${x#*default/linux/amd64/}" in
		"17.1/hardened")				selection='hardened'
		;;
		"17.1/openrc")					selection='openrc'
		;;
		"17.1/systemd")					selection='systemd'
		;;
		"17.1/desktop/plasma")			selection='plasma'
		;;		
		"17.1/desktop/gnome")			selection='gnome'
		;;
		"17.1/selinux")					selection='selinux'
		;;
		"17.1/desktop/plasma/systemd")	selection='plasma/systemd'
		;;	
		"17.1/desktop/gnome/systemd")	selection='gnome/systemd'
		;;
		"17.1/hardened/selinux")		selection='hardened/selinux'
		;;
	esac

}

	export PYTHONPATH=""

	export -f users
	export -f locales
	export -f system
	export -f services
	export -f install_modules

    for x in $@
    do
        case "${x}" in
            work=*)
            	directory="$(zfs get mountpoint ${x#*=} 2>&1 | sed -n 2p | awk '{print $3}')"
                dataset="${x#*=}"
            ;;
        esac
    done

	if [[ -z ${directory }]]l then exit; fi

	destination="/var/portage/profiles/"

    for x in $@
    do
        case "${x}" in
            package=*)
				profile=getG2Profile ${directory}
				hostname=$(chroot ${directory} /bin/bash -c "hostname")
				domain=$(chroot ${directory} /bin/bash -c "dnsdomainname")
				destination="${destination}/${domain}/${hostname}"
				echo $destination $dataset $domain $hostname $profile

            ;;
        esac
    done

    for x in $@
    do
        case "${x}" in
            install=*)

            ;;
        esac
    done


exit


	local destination=""
	clear_mounts ${directory}
	mounts ${directory}
    local profile = getG2Profile ${directory}
	zfs_keys ${dataset} /var/lib/portage/profiles/${domain}/${hostname}/
	chroot ${directory} /bin/bash -c "users ${_profile}"
	services_URL="$(echo "$(${SCRIPT_DIR}/bash/mirror.sh ${SCRIPT_DIR}/config/package.mirrors * )/${_profile}.services" | sed 's/ //g' | sed "s/\"/'/g")"
	chroot ${directory} /bin/bash -c "services ${services_URL}"
	zfs change-key -o keyformat=hex -o keylocation=file:///srv/crypto/zfs.key ${dataset}
	patches ${directory} ${_profile}
	clear_mounts ${directory}
	ls ${offset}
	zfs snapshot ${dataset}@safe

	# potential cleanup items
	#
	#	move binpkgs for client to /tmp as well, disable binpkg building
	#	reflash modules, or separate modules and kernel out...
	#	autofs integration w/ boot drive
	#	clear mounts 
	#
